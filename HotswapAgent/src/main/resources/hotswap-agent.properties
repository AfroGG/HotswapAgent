# Default agent properties
# You can override them in your application by creating hotswap-agent.properties file in class root
# and specifying new property values.

#
# Add this classpath prior to application classpath.
# This may be useful for example in multi module maven project, where you do not need to build JAR file
# after each change.
#
# Note that there must be a plugin that will provide actual replacement such as JettyPlugin for Jetty servlet container.
extraClasspath=

# Similar to extraClasspath this property adds classpath when searching for resources (not classes).
# While extra classpath just modifies the classloader, this setting does nothing until the resource
# is really changed.
#
# Sometimes it is not possible to point extraClasspath to your i.e. src/main/resources, because there are multiple
# replacements of resources in a building step. This setting will leave i.e. src/target/classes as default
# source for resources, but after the resource is modified in src/main/resources, the new changed resource
# is served.
watchResources=

# Create Java Platform Debugger Architecture (JPDA) connection on autoHotswap.port, watch for changed class files
# and do the hotswap (reload) in background.
#
# Normally you will launch debugging session from your IDE of use hotswap feature.
# This property is useful if you do not want to use debugging session for some reason or
# to enable hotswap at runtime environment.
#
# You need to specify JPDA port at startup
# <pre>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</pre>
autoHotswap=false

# Port on which you started JPDA session (address parameter - see autoHotswap property description)
autoHotswap.port=8000


# Logger setup - use entries in the format of
#   LOGGER.my.package=LEVEL
LOGGER=debug
LOGGER.org.hotswap.agent.plugin=trace
